#!/bin/bash

# Update AUR package(s) in their respective directory

parentDir=$(pwd)

aurUpdate () {
	if [[ "$1" != "" ]]; then
		softName=${1##*/}
	else
		softName=${parentDir##*/}
	fi
	softName=${softName^^}

	gitPull=$(git pull)
	if [[ "$gitPull" != "Already up to date." ]]; then 
		while : 
		do
			echo
			echo ":: Show git pull output? [Y/n]: "
			read usrGitIn
			usrGitIn=${usrGitIn:0:1} 
			if [[ "${usrGitIn^}" == "Y" ]]; then 
				echo "$gitPull"
				break	
			elif [[ "${usrGitIn^}" == "N" ]]; then
				break
			fi
		done
		
		whileBrk=false
		
		while [[ "$whileBrk" == false ]];
		do
			echo
			echo ":: Proceed with $softName package build? [Y/n]: "
			read usrIn
			usrIn=${usrIn:0:1}
			if [[ "${usrIn^}" == "Y" ]]; then
				makepkg -sri
				while :
				do	
					whileBrk=true
					echo
					echo ":: Clean $softName repo files? [Y/n]: "
					read userChoice
					userChoice=${userChoice:0:1}		
					if [[ "${userChoice^}" == "Y" ]]; then
						git clean -fdx
						break
					elif [[ "${userChoice^}" == "N" ]]; then
						break
					fi
				done				
				echo
				echo "::: AUR $softName package now updated and installed. :::"
			elif [[ "${firstLet^}" == "N" ]]; then
				echo "Alright, maybe next time; Later tater!"
				break
			fi
		done	
	else
		echo
		echo $softName
		echo $gitPull 
    	echo "::: Stay cool :::"
	fi
}

echoDirErr () {
	echo
	if [[ "$1" == "" ]]; then
		echo "Error!: directory $parentDir"
	else
		echo "Error!: directory $d"
	fi
	echo "is not a git repository or AUR applicaton."
}

dirLoop () {
	if [[ "$1" != "" ]]; then
		updateDir=$(find $parentDir -name $1)
	else
		updateDir=$parentDir
	fi

	cntrlFlow=false
	
	for d in $updateDir/*
	do
		if [[ -d "$d" && "{d:0:1}" != "." ]]; then
			cd "$d"
			if [[ -e .git && -d .git && -e PKGBUILD ]]; then
				aurUpdate $d
			else
				echoDirErr $d
			fi
		else
			cntrlFlow=true	
			break
		fi
	done

	if [[ "$cntrlFlow" == true ]]; then
		cd "$updateDir"
		if [[ -e .git && -d .git && -e PKGBUILD ]]; then
			aurUpdate $updateDir
		else
			echoDirErr
			exit
		fi
	fi
}


funcBreak=false

while [[ "$funcBreak" == false ]]; 
do
	echo
	echo ":: Run AUR Package Update? Note: this will work to update either a single application or all that reside in a parent folder [Y/n]"
	read resp
	resp=${resp:0:1}
		if [[ "${resp^}" == "Y" ]]; then 
			funcBreak=true
			whileBrkDir=false
			while [[ "$whileBrkDir" == false ]];
			do
				echo
				echo ":: Please enter only the name of the parent directory or the directory containing a specific piece of AUR software you want to update (Press return if presently in directory):"
				read pathResp
					if [[ ${pathResp:0:1} != "/" ]]; then
						whileBrkDir=true
						dirLoop	$pathResp
					else
						echo
						echo "Please only enter the name of the directory without \"/\", not the path"
					fi
			done	
		elif [[ "${resp^}" == "N" ]]; then
			echo
			echo "Alrighty."
			exit
		fi
done

